Algorithm for Reverse Echo Server and Client
1. Server (ReverseEchoServer.java)
Initialize Server Socket:
	Create a ServerSocket object listening on a predefined port (e.g., 2000).
	Display a message indicating that the server has started.
Accept Incoming Connections:
	Use the accept() method to listen for incoming client connections.
	When a client connects, create a new socket for communication with that client.
Create Client Handler:
For each client connection:
	Create a new thread to handle communication with the client.
	The thread will run the ClientHandler class, which manages the client’s input and output.
2. Client Handler (ClientHandler.java)
For each client connection:

Create input and output streams (BufferedReader and PrintWriter).
Continuously read the incoming message from the client.
If the message is "end", break out of the loop and close the socket.
Otherwise, reverse the received message using StringBuilder.
Send the reversed message back to the client.
Close Connections:
After the client disconnects or sends "end", close the input/output streams and the client socket.
3. Client (Client.java)
Connect to Server:
Create a Socket object to connect to the server using the server’s IP address and port.
Create input and output streams (BufferedReader and PrintWriter) to communicate with the server.
User Input and Sending Messages:
Prompt the user to input a message.
Continuously read the user’s message and send it to the server.
If the message is "end", exit the loop and close the connection.
Receive and Display Reversed Message:
After sending the message to the server, wait for the reversed message from the server.
Print the reversed message from the server.
Close Connection:
Close the socket and streams after the client exits or sends "end".